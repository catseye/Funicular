#!/usr/bin/env lua

--[[========================================================================]]--

--[[ Emulators ]]--

E_UAE = {
    name = 'E-UAE',
    source = 'http://www.rcdrummond.net/uae/e-uae-0.8.29-WIP4/e-uae-0.8.29-WIP4.tar.bz2'
}

QEMU = {
    name = 'QEMU',
    source = 'http://wiki.qemu-project.org/download/qemu-1.6.2.tar.bz2'
}

VICE = {
    name = 'VICE',
    source = 'http://downloads.sourceforge.net/project/vice-emu/releases/vice-2.4.tar.gz',
}

--[[ Emulator Modes ]]--

E_UAE_Amiga_500 = {
    name = 'E-UAE/Amiga 500',
    emulator = E_UAE,
    command = 'uae ${SYSTEM_IMAGE}',
    -- requires = 'kick.rom',
    -- writeout '.uaerc',
    --[[
whatever
goes in a
.uaerc
file.
Note that this probably can/should vary by partic^H^H^Hspecific funicular.
    ]]--
}

QEMU_i386 = {
    name = 'QEMU/i386',
    emulator = QEMU,
    command = 'qemu-system-i386 -hda ${SYSTEM_IMAGE}',
    setup_command = 'qemu-system-i386 -hda ${SYSTEM_IMAGE} -cdrom ${SETUP_IMAGE}',
    install_command = 'qemu-system-i386 -hda ${SYSTEM_IMAGE} -cdrom ${INSTALL_IMAGE} -boot order=d',
}

VICE_x64 = {
    name = 'VICE/x64',
    emulator = VICE,
    command = 'x64 ${SYSTEM_IMAGE}',
}

VICE_xvic = {
    name = 'VICE/xvic',
    emulator = VICE,
    command = 'xvic ${SYSTEM_IMAGE}',
}

--[[ Architectures ]]--

Amiga_500 = {
    name = "Amiga 500",
    emulator_mode = E_UAE_Amiga_500,
    create_system_image = function(funicular, size)
        execute(funicular, "mkdir -p ${SYSTEM_IMAGE}")
    end
}

i386 = {
    name = "i386",
    emulator_mode = QEMU_i386,
    create_system_image = function(funicular, size)
        execute(funicular, "dd if=/dev/zero of=${SYSTEM_IMAGE} bs=1M count=" .. size)
    end
}

Commodore_64 = {
    name = "Commodore 64",
    emulator_mode = VICE_x64,
    create_system_image = function(funicular, size)
        execute(funicular, "init_d64 ${SYSTEM_IMAGE}")
    end
}

VIC_20 = {
    name = "VIC 20",
    emulator_mode = VICE_xvic,
    create_system_image = function(funicular, size)
        execute(funicular, "init_d64 ${SYSTEM_IMAGE}")
    end
}

--[[ Platforms ]]--

AmigaDOS_1_3 = {
    name = "AmigaDOS 1.3",
    architecture = Amiga_500,
    install_image = 'Workbench_1.3.adf',
    setup_command = "whoknows",
}

NetBSD_6 = {
    name = "NetBSD 6.1.4",
    architecture = i386,
    install_image = 'NetBSD-6.1.4-i386.iso',
    setup_command = "genisoimage -R -J -D -joliet-long -o ${SETUP_IMAGE} staging_area",
}

FreeDOS_1_1 = {
    name = "FreeDOS 1.1",
    architecture = i386,
    install_image = 'fd11src.iso',
    install_image_url = 'http://www.freedos.org/download/download/fd11src.iso',
    setup_command = "genisoimage -R -J -D -joliet-long -o ${SETUP_IMAGE} staging_area",
}

--[[========================================================================]]--

dump_table = function(prefix, t)
    local k, v
    for k, v in pairs(t) do
        if type(v) == 'table' then
            dump_table(prefix .. k .. '.', v)
        elseif type(v) == 'function' then
            print(prefix .. k .. ' = function()')
        else
            print(prefix .. k .. ' = ' .. v)
        end
    end
end


function exists(filename)
   local file = io.open(filename, "r")
   if file == nil then
       return false
   end
   io.close(file)
   return true
end


function basename(filename)
    return filename:match("^.+/(.-)$")
end

function execute(funicular, command)
    command = command:gsub("${SETUP_IMAGE}", funicular.setup_image)
    command = command:gsub("${SYSTEM_IMAGE}", funicular.system_image)
    command = command:gsub("${INSTALL_IMAGE}", funicular.platform.install_image)
    print(command)
    os.execute(command)
end


function fetch_distfile(funicular, url)
    filename = 'distfiles/' .. basename(url)
    if not exists(filename) then
        execute(funicular, 'wget ' .. url .. ' -O ' .. filename)
    end
end


commands = {
    dump = function(funicular, arg)
        dump_table('', funicular)
    end,

    init = function(funicular, arg)
        size = arg[2]
        if size == nil then
            print "Usage: funicular init <size-in-megabytes>"
            os.exit(1)
        end
        print("init... size: " .. size)
        funicular.platform.architecture.create_system_image(funicular, size)
    end,

    install = function(funicular, arg)
        print("installing " .. funicular.platform.name .. " onto system image...")
        execute(funicular, funicular.platform.architecture.emulator_mode.install_command)
    end,

    setup = function(funicular, arg)
        print("creating setup image for " .. funicular.platform.name .. "...")
        execute(funicular, 'mkdir -p distfiles')
        for url in string.gmatch(funicular.distfiles, "[^%s]+") do
            fetch_distfile(funicular, url)
        end
        execute(funicular, 'rm -rf staging_area')
        execute(funicular, 'mkdir -p staging_area')
        for url in string.gmatch(funicular.distfiles, "[^%s]+") do
            execute(funicular, 'cp -p distfiles/' .. basename(url) .. ' staging_area/')
        end
        if exists('skel') then
            execute(funicular, 'cp -Rp skel/* staging_area/')
            -- execute(funicular, 'chmod 755 staging_area/*.sh')
        end
        execute(funicular, funicular.platform.setup_command)
        execute(funicular, funicular.platform.architecture.emulator_mode.setup_command)
    end,

    start = function(funicular, arg)
        print("starting " .. funicular.platform.architecture.emulator_mode.emulator.name .. "...")
        execute(funicular, funicular.platform.architecture.emulator_mode.command)
    end,

    backup = function(funicular, arg)
        -- copy system image to args[1]
        -- gzip it
    end,

    restore = function(funicular, arg)
        -- copy args[1] to system image
        -- gunzip it
    end,
}

--[[-- MAIN --]]--

local command = arg[1]
if command == nil or commands[command] == nil then
    print [[Usage: funicular <command>
where <command> is one of:
    init
    install
    setup
    start
    backup
    restore]]
    os.exit(1)
end

local result, error = loadfile("Funicularfile")
if result == nil then
    print("No Funicularfile found in this directory.")
    os.exit(1)
end
local funicular = result()

command = commands[command]
command(funicular, arg)
